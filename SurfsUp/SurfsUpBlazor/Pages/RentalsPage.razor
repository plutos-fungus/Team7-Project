@page "/RentalsPage"
@using SurfsUpLibrary;
@using SurfsUpBlazor.Components;
@using System.Text.Json
@inject HttpClient Http
<PageTitle>Rentals</PageTitle>

<h1>Rentals</h1>

<button type="button" class="btn btn-danger btn-sm" @onclick="OpenWeatherForecastDialog">Weather Forecast</button>
<div class="text-center">
    @if(rentals == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <a>RentalDate</a>
                    </th>
                    <th>
                        <a>Email</a>
                    </th>
                    <th>
                        <a>SurfboardID</a>
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (Rental r in rentals)
                {
                    <tr>
                        <td>
                            @r.EndDate
                        </td>
                        <td>
                            @r.Email
                        </td>
                        <td>
                            @r.SurfboardID
                        </td>
                        <td>
                            @*<a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>*@
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenEditRentalDialog(r)">Edit</button>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenDeleteRentalDialog(r)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@if (EditRentalDialogOpen)
{
    <EditRentalDialog Rent="@rental" OnClose="OnEditRentalDialogClose"></EditRentalDialog>
}
@if (DeleteRentalDialogOpen)
{
    <DeleteRentalDialog Rent="@rental" OnClose="OnDeleteRentalDialogClose"></DeleteRentalDialog>
}
@if (WeatherForecastDialogOpen)
{
    <WeatherForecast OnClose="@OnWeatherForecastDialogClose"></WeatherForecast>
}

@code {
    private Rental rental;
    private List<Rental>? rentals;
    public string SearchString = String.Empty;
    List<string> options = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        using HttpResponseMessage response = await Http.GetAsync("https://localhost:7260/api/Rentals/");
        response.EnsureSuccessStatusCode();
        var jsonRespone = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions()
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };
        var Rentals = JsonSerializer.Deserialize<List<Rental>>(jsonRespone, options);
        rentals = Rentals;
        //options = rentals.Select(s => s.Name).Distinct().ToList();
    }
    public bool EditRentalDialogOpen { get; set; }

    private void OnEditRentalDialogClose(bool accepted)
    {
        EditRentalDialogOpen = false;
        StateHasChanged();
    }
    private void OpenEditRentalDialog(Rental rent)
    {
        rental = rent;
        EditRentalDialogOpen = true;
        StateHasChanged();
    }

    public bool DeleteRentalDialogOpen { get; set; }

    private void OnDeleteRentalDialogClose(bool accepted)
    {
        DeleteRentalDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteRentalDialog(Rental rent)
    {
        rental = rent;
        DeleteRentalDialogOpen = true;
        StateHasChanged();
    }

    public bool WeatherForecastDialogOpen { get; set; }

    private void OnWeatherForecastDialogClose(bool accepted)
    {
        WeatherForecastDialogOpen = false;
        StateHasChanged();
    }
    private void OpenWeatherForecastDialog()
    {
        WeatherForecastDialogOpen = true;
        StateHasChanged();
    }
}
