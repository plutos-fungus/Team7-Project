@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>
@if(!userAuth){

    <div class="form-group">
        <label>
            User:
            <input @bind="userName" />
        </label>
    </div>
}
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private string? userName;
    private bool userAuth = false;

    private async Task CheckIfUserIsLogIn()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            userName = $"{user.Identity.Name}";
            userAuth = true;
        }
        else
        {
            userName = userInput;
            userAuth = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckIfUserIsLogIn();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userName, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}