@inject HttpClient Http;
@using SurfsUpLibrary;
@using System.Text.Json

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Board</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <label>Name:</label>
                <input type="text" @bind="@Board.Name"/>
                @*<label>@Board.Name</label>*@
                <br />
                <label>Boardtype:</label>
                <label>@Board.BoardType</label>
                <br />
                <label>Price:</label>
                <input type="text" @bind="@Board.Price" />
                @*<label>@Board.Price</label>*@
                <br />
                <label>Length:</label>
                <input type="text" @bind="@Board.Length" />
                @*<label>@Board.Length</label>*@
                <br />
                <label>Thickness:</label>
                <input type="text" @bind="@Board.Thickness" />
                @*<label>@Board.Thickness</label>*@
                <br />
                <label>Volume:</label>
                <input type="text" @bind="@Board.Volume" />
                @*<label>@Board.Volume</label>*@
                <br />
                <label>Width:</label>
                <input type="text" @bind="@Board.Width" />
                @*<label>@Board.Volume</label>*@
                <br />
                <label>Equipment types:</label>
                <input type="text" @bind="@Board.EquipmentTypes" />
                @*<label>@Board.EquipmentTypes</label>*@
                <br />
                <label>Image:</label>
                <input type="text" @bind="@Board.Image" />
                @*@if (@Board.Image != "")
                {
                    <img src="@Board.Image" style="width: 150px" alt="ImageNotFound" />
                }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@ModalOk">Edit</button>
                <button type="button" class="btn btn-primary" @onclick="@ModalCancel">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Surfboard Board { get; set; }

    private readonly string _APISurfboardLink = @"https://localhost:7260/api/v1/Surfboards/";
    private readonly string _APILinkRental = @"https://localhost:7260/api/v1/Rentals/";

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        ApiCallEdit();
        return OnClose.InvokeAsync(true);
    }

    private async void ApiCallEdit()
    {
        HttpClient client = new HttpClient();
        using HttpResponseMessage response = await client.GetAsync(_APISurfboardLink + Board.ID);
        response.EnsureSuccessStatusCode();

        var jsonRespone = await response.Content.ReadAsStringAsync();

        var options = new JsonSerializerOptions()
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

        var Surfboard = JsonSerializer.Deserialize<Surfboard>(jsonRespone, options);

        Surfboard.Name = Board.Name;
        Surfboard.BoardType = Board.BoardType;
        Surfboard.Price = Board.Price;
        Surfboard.Length = Board.Length;
        Surfboard.Thickness = Board.Thickness;
        Surfboard.Volume = Board.Volume;
        Surfboard.Width = Board.Width;
        Surfboard.EquipmentTypes = Board.EquipmentTypes;
        Surfboard.Image = Board.Image;

        using HttpResponseMessage SurfboardPutResponse = await Http.PutAsJsonAsync(_APISurfboardLink + Board.ID, Surfboard);

        SurfboardPutResponse.EnsureSuccessStatusCode();

    }
}
